{"version":3,"sources":["assets/img/covid-bg.png","assets/img/person.png","components/Card.jsx","helpers/DateFormat.js","components/Graph.jsx","components/Footer.jsx","pages/Dashboard.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","cardGrid","paddingTop","spacing","paddingBottom","card","height","display","maxWidth","flexDirection","boxShadow","borderRadius","cardContent","paddingLeft","flexGrow","icon","fontSize","color","textTitle","fontWeight","textAmount","marginTop","textDescription","BaseCard","props","classes","Card","className","CardContent","Typography","variant","align","gutterBottom","title","amount","description","FixedCard","useState","data","setData","useEffect","fetchData","axios","get","then","res","catch","err","cardData","id","totalConfirmed","toLocaleString","style","totalRecovered","totalDeaths","Container","Grid","container","map","item","key","xs","md","Format","value","Intl","DateTimeFormat","month","day","format","Date","width","graph","paddingRight","BaseChart","formatData","x","i","date","DateOnly","last_updated","total_confirmed","total_deaths","margin","top","right","left","bottom","strokeDasharray","dataKey","type","stroke","activeDot","r","ReCharts","footer","backgroundColor","padding","Footer","Link","href","getFullYear","background","require","heroContent","palette","paper","backgroundSize","position","overflow","headerTitle","headerDesc","lineHeight","headerImgWrapper","headerImg","marginLeft","marginRight","textWrapper","textWrapper2","Dashboard","CssBaseline","justify","src","alt","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.048122cd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/covid-bg.6c42c0a3.png\";","module.exports = __webpack_public_path__ + \"static/media/person.bba198e2.png\";","import React, { useEffect, useState } from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport axios from 'axios';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    cardGrid: {\r\n        paddingTop: theme.spacing(8),\r\n        paddingBottom: theme.spacing(8),\r\n    },\r\n    card: {\r\n        height: '100%',\r\n        display: 'flex',\r\n        maxWidth: '380px',\r\n        flexDirection: 'column',\r\n        boxShadow: '-9px 9px 20px rgb(51 51 51 / 17%), -10px 8px 40px rgb(232 232 232 / 23%)',\r\n        borderRadius: 10\r\n    },\r\n    cardContent: {\r\n        paddingLeft: theme.spacing(5),\r\n        flexGrow: 1,\r\n    },\r\n    icon: {\r\n        fontSize: 30,\r\n        color: 'red'\r\n    },\r\n    textTitle: {\r\n        fontWeight: 'bold'\r\n    },\r\n    textAmount: {\r\n        marginTop: 20,\r\n        fontWeight: 'bolder'\r\n    },\r\n    textDescription: {\r\n        fontWeight: '100'\r\n    }\r\n}));\r\n\r\nfunction BaseCard({ ...props }) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Card className={classes.card}>\r\n            <CardContent className={classes.cardContent}>\r\n                <Typography variant=\"h6\" align=\"left\" className={classes.textTitle} gutterBottom>\r\n                    <div className={classes.icon}>\r\n                        {props.icon}\r\n                    </div>\r\n                    {props.title}\r\n                </Typography>\r\n                <Typography variant=\"h3\" align=\"left\" className={classes.textAmount}>\r\n                    {props.amount}\r\n                </Typography>\r\n                <Typography variant=\"subtitle2\" align=\"left\" className={classes.textDescription}>\r\n                    {props.description}\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default function FixedCard() {\r\n    const classes = useStyles();\r\n    // Data yang akan digunakan - Set awal dengan array kosong\r\n    const [data, setData] = useState([])\r\n\r\n    // useEffect - merupakan lifecyle react hook yang jalan pertama kali disaat page dikunjungi / direfresh\r\n    useEffect(() => {\r\n        // Variable baru\r\n        let fetchData;\r\n        axios.get('https://api.coronatracker.com/v3/stats/worldometer/country?countryCode=ID')\r\n            .then(res => {\r\n                // ternary (if else) - Jika berhasil mendapatkan data dari api maka data diset dengan fetchData yang merupakan data dari api(res.data[0]).\r\n                fetchData = res ? res.data[0] : []\r\n                setData(fetchData)\r\n            })\r\n            .catch(err => {\r\n                // Jika gagal mendapatkan data dari api maka data akan diset menjadi array kosong\r\n                setData([])\r\n            })\r\n    }, [])\r\n\r\n    const cardData = [\r\n        {\r\n            id: 1,\r\n            icon: <AddIcon />,\r\n            title: \"Case Confirmed\",\r\n            // data totalConfirmed\r\n            amount: data.totalConfirmed ? data.totalConfirmed.toLocaleString() : 0,\r\n            description: \"Total of confirmed cases.\"\r\n        },\r\n        {\r\n            id: 2,\r\n            icon: <CheckIcon style={{ color: 'green' }} />,\r\n            title: \"Case Recovered\",\r\n            // data totalRecovered\r\n            amount: data.totalRecovered ? data.totalRecovered.toLocaleString() : 0,\r\n            description: \"Total of recovered cases.\"\r\n        },\r\n        {\r\n            id: 3,\r\n            icon: <RemoveIcon style={{ color: 'black' }} />,\r\n            title: \"Case Death\",\r\n            // data totalDeaths\r\n            amount: data.totalDeaths ? data.totalDeaths.toLocaleString() : 0,\r\n            description: \"Total of death cases.\"\r\n        }\r\n    ]\r\n\r\n    return (\r\n        <div>\r\n            <Container className={classes.cardGrid}>\r\n                <Grid container spacing={4}>\r\n                    {cardData.map((data) => (\r\n                        <Grid item key={data.id} xs={12} md={6}>\r\n                            <BaseCard icon={data.icon} title={data.title} amount={data.amount} description={data.description} />\r\n                        </Grid>\r\n                    ))}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}","class Format {\r\n    static DateOnly(value) {\r\n        let selectedDate = new Intl.DateTimeFormat('en-US', {\r\n            month: 'long',\r\n            day: 'numeric',\r\n        }).format(new Date(value))\r\n        return selectedDate;\r\n    }\r\n}\r\n\r\nexport default Format;","import React, { useState, useEffect } from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Container from '@material-ui/core/Container';\r\nimport {\r\n    LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer\r\n} from 'recharts';\r\nimport axios from 'axios';\r\nimport Format from '../helpers/DateFormat';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    cardGrid: {\r\n        paddingTop: theme.spacing(4),\r\n        paddingBottom: theme.spacing(8),\r\n    },\r\n    card: {\r\n        height: '100%',\r\n        display: 'flex',\r\n        width: '100%',\r\n        flexDirection: 'column',\r\n        boxShadow: '-9px 9px 20px rgb(51 51 51 / 17%), -10px 8px 40px rgb(232 232 232 / 23%)',\r\n        borderRadius: 10\r\n    },\r\n    cardContent: {\r\n        paddingLeft: theme.spacing(5),\r\n        flexGrow: 1,\r\n    },\r\n    graph: {\r\n        paddingTop: theme.spacing(2),\r\n        paddingRight: theme.spacing(4)\r\n    }\r\n}));\r\n\r\nfunction BaseChart() {\r\n    const classes = useStyles();\r\n    // Data yang akan digunakan - Set awal dengan array kosong\r\n    const [data, setData] = useState([])\r\n\r\n    // useEffect - merupakan lifecyle react hook yang jalan pertama kali disaat page dikunjungi / direfresh\r\n    useEffect(() => {\r\n        // Variable baru\r\n        let fetchData, formatData;\r\n        axios.get('https://api.coronatracker.com/v3/analytics/trend/country?startDate=2020-03-01&endDate=2020-03-31&countryCode=ID')\r\n            .then(res => {\r\n                // ternary (if else) - Jika berhasil mendapatkan data dari api maka data diset dengan fetchData yang merupakan data dari api(res.data).\r\n                fetchData = res ? res.data : []\r\n                // ternary (if else) - Jika berhasil mendapatkan data dari fetchData maka data tersebut akan dimapping dan diubah isian dalam objectnya dan data last_updated diformat menjadi tanggal yang mudah dipahami.\r\n                formatData = fetchData ? fetchData.map((x, i) => ({ date: Format.DateOnly(x.last_updated), total_confirmed: x.total_confirmed, total_deaths: x.total_deaths })) : []\r\n                setData(formatData)\r\n            })\r\n            .catch(err => {\r\n                // Jika gagal mendapatkan data dari api maka data akan diset menjadi array kosong\r\n                setData([])\r\n            })\r\n    }, [])\r\n\r\n    return (\r\n        <div className={classes.graph}>\r\n            <ResponsiveContainer height={400}>\r\n                <LineChart\r\n                    width={500}\r\n                    height={300}\r\n                    data={data}\r\n                    margin={{\r\n                        top: 5, right: 30, left: 20, bottom: 5,\r\n                    }}\r\n                >\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"date\" />\r\n                    <YAxis />\r\n                    <Tooltip />\r\n                    <Legend />\r\n                    {/* Line chart untuk total kasus terkonfirmasi */}\r\n                    <Line type=\"monotone\" dataKey=\"total_confirmed\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\r\n                    {/* Line chart untuk total kasus kematian */}\r\n                    <Line type=\"monotone\" dataKey=\"total_deaths\" stroke=\"#FF0000\" activeDot={{ r: 8 }} />\r\n                </LineChart>\r\n            </ResponsiveContainer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default function ReCharts() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Container className={classes.cardGrid}>\r\n            <Grid container>\r\n                <Card className={classes.card}>\r\n                    <CardContent className={classes.cardContent}>\r\n                        <BaseChart />\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n        </Container>\r\n    )\r\n}","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Link from '@material-ui/core/Link';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    footer: {\r\n        backgroundColor: '#1C3E93',\r\n        padding: theme.spacing(4),\r\n    },\r\n}));\r\n\r\n\r\nexport default function Footer() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.footer}>\r\n            <Typography variant=\"body2\" align=\"center\" style={{ color: '#fff' }}>\r\n                {'Copyright © '}\r\n                <Link color=\"inherit\" style={{ fontWeight: 'bold' }} href=\"https://material-ui.com/\">\r\n                    Belajar React\r\n                </Link>{' '}\r\n                {new Date().getFullYear()}\r\n                {'.'}\r\n            </Typography>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport CovidCard from '../components/Card';\r\nimport CovidGraph from '../components/Graph';\r\nimport Footer from '../components/Footer';\r\n\r\nconst background = require(\"../assets/img/covid-bg.png\");\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    heroContent: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        padding: theme.spacing(8, 0, 6),\r\n        background: `url(${background})`,\r\n        backgroundSize: 'auto',\r\n        height: '490px',\r\n        position: 'relative',\r\n        overflow: 'hidden'\r\n    },\r\n    headerTitle: {\r\n        fontWeight: 'bold',\r\n        color: '#fff'\r\n    },\r\n    headerDesc: {\r\n        color: '#fff',\r\n        fontWeight: '100',\r\n        lineHeight: 2\r\n    },\r\n    headerImgWrapper: {\r\n        marginTop: theme.spacing(4),\r\n    },\r\n    headerImg: {\r\n        width: '100%',\r\n        display: 'block',\r\n        marginLeft: 'auto',\r\n        marginRight: 'auto'\r\n    },\r\n    textWrapper: {\r\n        paddingTop: theme.spacing(5),\r\n        marginTop: 20,\r\n        fontWeight: 'bolder'\r\n    },\r\n    textWrapper2: {\r\n        paddingTop: theme.spacing(1),\r\n        marginTop: 20,\r\n        fontWeight: 'bolder'\r\n    },\r\n    footer: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        padding: theme.spacing(6),\r\n    },\r\n}));\r\n\r\nexport default function Dashboard() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div>\r\n            <CssBaseline />\r\n            <main>\r\n                {/* Header */}\r\n                <div className={classes.heroContent}>\r\n                    <Container maxWidth=\"sm\">\r\n                        <Typography variant=\"h2\" align=\"center\" className={classes.headerTitle} gutterBottom>\r\n                            CovLytics\r\n                        </Typography>\r\n                        <Typography variant=\"subtitle1\" align=\"center\" className={classes.headerDesc}>\r\n                            The Coronavirus (COVID-19) was first reported in Wuhan, China, in December 2019,\r\n                            the outbreak was later recognized as a pandemic by the World Health Organization\r\n                            (WHO) on 11 March 2020.\r\n                        </Typography>\r\n                        <div className={classes.headerImgWrapper}>\r\n                            <Grid container spacing={2} justify=\"center\">\r\n                                <Grid item xs={12} md={12}>\r\n                                    <img src={require(\"../assets/img/person.png\")} alt=\"Logo\" className={classes.headerImg} />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </div>\r\n                    </Container>\r\n                </div>\r\n                {/* End of Header */}\r\n                {/* Body */}\r\n                <Container>\r\n                    <Grid container>\r\n                        <Grid item xs={12} md={4}>\r\n                            <Typography variant=\"h3\" align=\"left\" className={classes.textWrapper} gutterBottom>\r\n                                Indonesia\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle2\" align=\"left\" style={{ fontWeight: '100', lineHeight: 2 }}>\r\n                                Latest update on confirmed cases,\r\n                                people recovered & total death in\r\n                                Indonesia.\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={12} md={8}>\r\n                            <CovidCard />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid container>\r\n                        <Grid item xs={12} md={4}>\r\n                            <Typography variant=\"h3\" align=\"left\" className={classes.textWrapper2} gutterBottom>\r\n                                Graphic Statistic\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle2\" align=\"left\" style={{ fontWeight: '100', lineHeight: 2 }}>\r\n                                Latest update in graphic on confirmed\r\n                                cases, people recovered & total death in\r\n                                Indonesia.\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={12} md={8}>\r\n                            <CovidGraph />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Container>\r\n                {/* End Body */}\r\n            </main>\r\n            {/* Footer */}\r\n            <Footer />\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport Dashboard from './pages/Dashboard';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Dashboard />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}